{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Tutorial\\\\weather_app\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './app_component/weather.component'; // API call api.openweathermap.org/data/2.5/weather?q=London,uk\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_Key = \"010fd1b032ebe0569e66380b3d166bec\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async () => {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_Key}`);\n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        city: response.name,\n        country: response.sys.country,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description\n      });\n      this.get_WeatherIcon(this.weatherIcon); //     componentWillMount(){\n      //       this.setState({\n      //         city: response.name,\n      //         country: response.sys.country,\n      //       });\n      //  };\n    };\n\n    this.state = {};\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    this.getWeather();\n    this.weatherIcon = {\n      Thunderstrom: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstrom\n        });\n        break;\n\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeID === 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Weather, {\n        city: this.state.city,\n        country: this.state.country,\n        temp_celsius: this.state.celsius,\n        temp_max: this.state.temp_max,\n        temp_min: this.state.temp_min,\n        description: this.state.description,\n        weatherIcon: this.state.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/React Tutorial/weather_app/src/App.js"],"names":["React","Weather","API_Key","App","Component","constructor","getWeather","api_call","fetch","response","json","console","log","setState","city","name","country","sys","celsius","calCelsius","main","temp","temp_max","temp_min","description","weather","get_WeatherIcon","weatherIcon","state","undefined","icon","error","Thunderstrom","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","cell","Math","floor","icons","rangeID","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAO,qCAAP;AACA,OAAO,sCAAP;AACA,OAAOC,OAAP,MAAoB,mCAApB,C,CAGA;;;AACA,MAAMC,OAAO,GAAG,kCAAhB;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAiC;AAC/BC,EAAAA,WAAW,GAAE;AACX;;AADW,SA8DbC,UA9Da,GA8DA,YAAU;AACrB,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,oEAAmEN,OAAQ,EAA7E,CAA5B;AAEA,YAAMO,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEA,WAAKI,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAEL,QAAQ,CAACM,IADH;AAEZC,QAAAA,OAAO,EAAEP,QAAQ,CAACQ,GAAT,CAAaD,OAFV;AAGZE,QAAAA,OAAO,EAAE,KAAKC,UAAL,CAAgBV,QAAQ,CAACW,IAAT,CAAcC,IAA9B,CAHG;AAIZC,QAAAA,QAAQ,EAAE,KAAKH,UAAL,CAAgBV,QAAQ,CAACW,IAAT,CAAcE,QAA9B,CAJE;AAKZC,QAAAA,QAAQ,EAAE,KAAKJ,UAAL,CAAgBV,QAAQ,CAACW,IAAT,CAAcG,QAA9B,CALE;AAMZC,QAAAA,WAAW,EAAEf,QAAQ,CAACgB,OAAT,CAAiB,CAAjB,EAAoBD;AANrB,OAAd;AASA,WAAKE,eAAL,CAAqB,KAAKC,WAA1B,EAfqB,CAiBzB;AACA;AACA;AACA;AACA;AACA;AAEG,KAtFY;;AAAA,SAyFbC,KAzFa,GAyFP,EAzFO;AAEX,SAAKA,KAAL,GAAa;AACXd,MAAAA,IAAI,EAAEe,SADK;AAEXb,MAAAA,OAAO,EAAEa,SAFE;AAGXC,MAAAA,IAAI,EAAED,SAHK;AAIXT,MAAAA,IAAI,EAAES,SAJK;AAKXX,MAAAA,OAAO,EAAEW,SALE;AAMXP,MAAAA,QAAQ,EAAEO,SANC;AAOXN,MAAAA,QAAQ,EAAEM,SAPC;AAQXL,MAAAA,WAAW,EAAE,EARF;AASXO,MAAAA,KAAK,EAAE;AATI,KAAb;AAWA,SAAKzB,UAAL;AAEA,SAAKqB,WAAL,GAAmB;AACjBK,MAAAA,YAAY,EAAE,iBADG;AAEjBC,MAAAA,OAAO,EAAE,UAFQ;AAGjBC,MAAAA,IAAI,EAAE,kBAHW;AAIjBC,MAAAA,IAAI,EAAE,SAJW;AAKjBC,MAAAA,UAAU,EAAE,QALK;AAMjBC,MAAAA,KAAK,EAAE,cANU;AAOjBC,MAAAA,MAAM,EAAE;AAPS,KAAnB;AASD;;AAEDnB,EAAAA,UAAU,CAACE,IAAD,EACV;AACE,QAAIkB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWpB,IAAI,GAAG,MAAlB,CAAX;AACA,WAAOkB,IAAP;AACD;;AAEDb,EAAAA,eAAe,CAACgB,KAAD,EAAOC,OAAP,EAAe;AAC5B,YAAO,IAAP;AACE,WAAKA,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAI,GAAhC;AACE,aAAK9B,QAAL,CAAc;AAACiB,UAAAA,IAAI,EAAC,KAAKH,WAAL,CAAiBK;AAAvB,SAAd;AACA;;AACF,WAAKW,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAI,GAAhC;AACE,aAAK9B,QAAL,CAAc;AAACiB,UAAAA,IAAI,EAAC,KAAKH,WAAL,CAAiBM;AAAvB,SAAd;AACA;;AACF,WAAKU,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAI,GAAhC;AACE,aAAK9B,QAAL,CAAc;AAACiB,UAAAA,IAAI,EAAC,KAAKH,WAAL,CAAiBO;AAAvB,SAAd;AACA;;AACF,WAAKS,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAI,GAAhC;AACE,aAAK9B,QAAL,CAAc;AAACiB,UAAAA,IAAI,EAAC,KAAKH,WAAL,CAAiBQ;AAAvB,SAAd;AACA;;AACF,WAAKQ,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAI,GAAhC;AACE,aAAK9B,QAAL,CAAc;AAACiB,UAAAA,IAAI,EAAC,KAAKH,WAAL,CAAiBS;AAAvB,SAAd;AACA;;AACF,WAAKO,OAAO,KAAG,GAAf;AACE,aAAK9B,QAAL,CAAc;AAACiB,UAAAA,IAAI,EAAC,KAAKH,WAAL,CAAiBU;AAAvB,SAAd;AACA;;AACF,WAAKM,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAI,GAAhC;AACE,aAAK9B,QAAL,CAAc;AAACiB,UAAAA,IAAI,EAAC,KAAKH,WAAL,CAAiBW;AAAvB,SAAd;AACA;;AACF;AACE,aAAKzB,QAAL,CAAc;AAACiB,UAAAA,IAAI,EAAE,KAAKH,WAAL,CAAiBW;AAAxB,SAAd;AAvBJ;AA2BD;;AA8BDM,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACC,QAAC,OAAD;AAAS,QAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWd,IAA1B;AACA,QAAA,OAAO,EAAE,KAAKc,KAAL,CAAWZ,OADpB;AAEA,QAAA,YAAY,EAAE,KAAKY,KAAL,CAAWV,OAFzB;AAGA,QAAA,QAAQ,EAAI,KAAKU,KAAL,CAAWN,QAHvB;AAIA,QAAA,QAAQ,EAAI,KAAKM,KAAL,CAAWL,QAJvB;AAKA,QAAA,WAAW,EAAI,KAAKK,KAAL,CAAWJ,WAL1B;AAMA,QAAA,WAAW,EAAI,KAAKI,KAAL,CAAWE;AAN1B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AAzG8B;;AA4GjC,eAAe3B,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './app_component/weather.component';\n\n\n// API call api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_Key = \"010fd1b032ebe0569e66380b3d166bec\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    this.getWeather(); \n\n    this.weatherIcon = {\n      Thunderstrom: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  };\n\n  calCelsius(temp)\n  {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeID){\n    switch(true){\n      case rangeID>=200 && rangeID <= 232:\n        this.setState({icon:this.weatherIcon.Thunderstrom});\n        break;\n      case rangeID>=300 && rangeID <= 321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeID>=500 && rangeID <= 531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n      case rangeID>=600 && rangeID <= 622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeID>=701 && rangeID <= 781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeID===800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeID>=801 && rangeID <= 804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState({icon: this.weatherIcon.Clouds});\n      \n    }\n\n  }\n\n  getWeather = async() =>{\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_Key}`);\n\n    const response = await api_call.json();\n    console.log(response); \n\n    this.setState({\n      city: response.name,\n      country: response.sys.country,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max: this.calCelsius(response.main.temp_max),\n      temp_min: this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n    });\n\n    this.get_WeatherIcon(this.weatherIcon,)\n\n//     componentWillMount(){\n//       this.setState({\n//         city: response.name,\n//         country: response.sys.country,\n//       });\n//  };\n\n  }\n\n\n  state={}\n  render(){\n    return (\n      <div className=\"App\">\n       <Weather city={this.state.city} \n       country={this.state.country} \n       temp_celsius={this.state.celsius}\n       temp_max = {this.state.temp_max}\n       temp_min = {this.state.temp_min}\n       description = {this.state.description}\n       weatherIcon = {this.state.icon}\n       \n        /> \n    </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}