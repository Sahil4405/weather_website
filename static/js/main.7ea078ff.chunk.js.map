{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstrom","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeID","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ea078ff.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"cards pt-4\">\r\n        <h1>{props.city}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n        </h5>\r\n        {/* <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1> */}\r\n\r\n        {props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null }\r\n\r\n\r\n        {/* show max and min temperature */}\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n  if(min&&max)\r\n  {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport './form.style.css';\r\n// import 'form.style.css';\r\n\r\nconst Form = props =>{\r\n     return (\r\n         <div className=\"container\">\r\n         <div> {props.error ? error() : null} </div>\r\n             <form onSubmit={props.loadweather}>\r\n             <div className=\"row\">\r\n                 <div className=\"col-md-3 offset-md-2\">\r\n                     <input type=\"text\" className=\"forn-control\" name=\"city\" autoComplete=\"off\" placeholder=\"city\"/>\r\n                 </div>\r\n                 <div className=\"col-md-3\">\r\n                     <input type=\"text\" className=\"forn-control\" name=\"country\" autoComplete=\"off\" placeholder=\"country\" />\r\n                 </div>\r\n                 <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n                     <button className=\"btn btn-warning\">Get Weather</button>\r\n                 </div>\r\n             </div>\r\n             </form>\r\n         </div>\r\n\r\n     )\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please enter City and Country\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\n\n\n// API call api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_Key = \"010fd1b032ebe0569e66380b3d166bec\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    // this.getWeather(); \n\n    this.weatherIcon = {\n      Thunderstrom: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  };\n\n  calCelsius(temp)\n  {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeID){\n    switch(true){\n      case rangeID>=200 && rangeID <= 232:\n        this.setState({icon:this.weatherIcon.Thunderstrom});\n        break;\n      case rangeID>=300 && rangeID <= 321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeID>=500 && rangeID <= 531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n      case rangeID>=600 && rangeID <= 622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeID>=701 && rangeID <= 781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeID===800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeID>=801 && rangeID <= 804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState({icon: this.weatherIcon.Clouds});\n    }\n\n  }\n\n  getWeather = async(e) =>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(city && country)\n    {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}`);\n\n    const response = await api_call.json();\n    // console.log(response); \n\n    this.setState({\n      city: `${response.name},${response.sys.country}`,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max: this.calCelsius(response.main.temp_max),\n      temp_min: this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n      error: false\n    });\n\n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n    }else{\n      this.setState({error: true});\n    }\n  }\n\n\n  // state={}\n  render(){\n    return (\n      <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error}/>\n       <Weather city={this.state.city} \n       country={this.state.country} \n       temp_celsius={this.state.celsius}\n       temp_max = {this.state.temp_max}\n       temp_min = {this.state.temp_min}\n       description = {this.state.description}\n       weatherIcon = {this.state.icon}\n        /> \n    </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}